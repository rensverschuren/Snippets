package  {		//importing classes	import flash.display.MovieClip;	import flash.display.Stage;	import flash.display.DisplayObject;	import flash.events.Event;		import flash.events.MouseEvent;	import flash.geom.ColorTransform;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.display.Loader;	import flash.events.ProgressEvent;		import flash.net.URLRequest;		import com.coreyoneil.collision.CollisionList;	import flash.filters.*;	import flash.events.KeyboardEvent;	import flash.media.Sound;	import flash.net.Socket;			public class Engine extends MovieClip {					//declaring instance variables		public var circle1:Circle;		public var circle2:Circle;		public var circle3:Circle;		public var path1:Path;		public var path2:Path;		public var path3:Path;		public var cursor:Cursor;					public var life:uint = 1; //the life of the particle		public var oldMouseX:uint = mouseX; //stores the old position of the cursor		public var oldMouseY:uint = mouseY; // same as above		public var glowElement:Glow;		public var defaultCircleSize:int;					public var vignetteLoader:Loader;		public var vignetteRequest:URLRequest;		public var touchColor:ColorTransform = transform.colorTransform;				public var background1Loader:Loader;		public var background2Loader:Loader;		public var backgroundRequest:URLRequest;				public var musicRequest:URLRequest;		public var music:Sound;				public var collisionList:CollisionList;		public var collisions:Array;				public var activeCircle:Circle;		public var activePath:Path;		public var cicleNumber:int;		public function Engine() {							//initializing objects			this.cursor 	= new Cursor();					this.circle1 	= new Circle();				this.circle2 	= new Circle();						this.circle3 	= new Circle();					this.path1		= new Path();			this.path2		= new Path();			this.path3		= new Path();						//adding objects to the stage			stage.addChildAt(cursor, 1);			stage.addChildAt(circle1, 0);			stage.addChildAt(circle2, 0);			stage.addChildAt(circle3, 0);			stage.addChildAt(path1, 0);			stage.addChildAt(path2, 0);			stage.addChildAt(path3, 0);																//setting default coordinate values			this.circle1.y = 1280;			this.circle2.y = 1804;			this.circle3.y = 2328;			this.circle1.x = 500;			this.circle2.x = 500;			this.circle3.x = 500;			this.path1.y = 1280;			this.path2.y = 1804;			this.path3.y = 2328;			this.path1.x = 500;			this.path2.x = 500;			this.path3.x = 500;									//setting the circlenumbers			this.circle1.circleNumber = 1;			this.circle2.circleNumber = 2;			this.circle3.circleNumber = 3;			this.circle1.rootIndex = 1;			this.circle2.rootIndex = 2;			this.circle3.rootIndex = 3;			//setting the pathnumbers			this.path1.pathNumber = 1;			this.path2.pathNumber = 2;			this.path3.pathNumber = 3;					this.path1.rootIndex = 1;			this.path2.rootIndex = 2;			this.path3.rootIndex = 3;						this.cicleNumber = 1;						//setting the initial images			this.circle1.replaceImage();			this.circle2.replaceImage();			this.circle3.replaceImage();						this.path1.replaceImage();			this.path2.replaceImage();			this.path3.replaceImage();									//eventListener for moving objects			stage.addEventListener(Event.ENTER_FRAME, moveObjects);						stage.addEventListener(Event.ENTER_FRAME, glowCursor);			stage.addEventListener(MouseEvent.MOUSE_MOVE, cursorPosition);					stage.addEventListener(KeyboardEvent.KEY_DOWN, rotateCircle);									//load image from external file			this.background1Loader = new Loader();						this.background2Loader = new Loader();					this.backgroundRequest = new URLRequest("sidebars.png");			this.background1Loader.contentLoaderInfo.addEventListener(Event.COMPLETE, background1LoaderComplete);			this.background2Loader.contentLoaderInfo.addEventListener(Event.COMPLETE, background2LoaderComplete);			this.background1Loader.load(this.backgroundRequest);					this.background2Loader.load(this.backgroundRequest);				//this.background1Loader.y = -800;			this.background2Loader.y = -800;						//load image from external file			this.vignetteLoader = new Loader();						this.vignetteRequest = new URLRequest("vignette.png");			this.vignetteLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, vignetteLoaderComplete);			this.vignetteLoader.load(this.vignetteRequest);							this.collisionList = new CollisionList(this.cursor, this.path1, this.path2, this.path3, this.circle1, this.circle2, this.circle3);			this.touchColor.color = 0x9d0000;						//loading music			this.musicRequest = new URLRequest("music.mp3");			this.music = new Sound();			this.music.load(musicRequest);			this.music.addEventListener(Event.COMPLETE, playMusic);		}				public function playMusic(e:Event) {			this.music.play();		}				public function vignetteLoaderComplete(e:Event) {			//when the image is loaded from disk, add it to the child array			addChildAt(this.vignetteLoader, 1);					this.vignetteLoader.alpha = 0.8;					}					public function background1LoaderComplete(e:Event) {			//when the image is loaded from disk, add it to the child array			addChildAt(this.background1Loader, 0);					}				public function background2LoaderComplete(e:Event) {			//when the image is loaded from disk, add it to the child array			addChildAt(this.background2Loader, 0);								}				public function moveObjects(evt:Event):void {					//getting the list of collisions			var collisions:Array = this.collisionList.checkCollisions();						var aantal:int = 0;						//if there is a collision			if(collisions.length > 0) {												//iterate through the collisions				for(var i:int = 0; i < collisions.length; i++) {										var collision:Object = collisions[i];										//if the collided object is a circle					if(collision.object2.type == "circle") {												 switch(collision.object2.rootIndex) {							case 1:							this.activeCircle = this.circle2;							this.activePath = this.path2;							break;							case 2:							this.activeCircle = this.circle3;							this.activePath = this.path3;							break;							case 3:							this.activeCircle = this.circle1;							this.activePath = this.path1;							break;						}																	}					else {												this.vignetteLoader.filters = [new GlowFilter()];											}									}			}			else {				this.vignetteLoader.filters = [];						}									//every frame: moving upwards			circle1.y -= 1;			circle2.y -= 1;			circle3.y -= 1;										background1Loader.y += 1;			background2Loader.y += 1;						path1.y -= 1;			path2.y -= 1;			path3.y -= 1;						//looping the animation			if(circle1.y == -257) {				//setting the new position (off-stage)				circle1.y = 1315;								//setting the new circlenumber + image				circle1.updateCircle();										}						if(circle2.y == -257) {				//setting the new position (off-stage)				circle2.y = 1315;								//setting the new circlenumber + image				circle2.updateCircle();							}						if(circle3.y == -257) {				//setting the new position (off-stage)				circle3.y = 1315;								//setting the new circlenumber + image				circle3.updateCircle();											}								if(path1.y == -257) {				//setting the new position (off-stage)								path1.y = 1315;				//setting the new circlenumber + image										path1.updatePath();						}						if(path2.y == -257) {				//setting the new position (off-stage)								path2.y = 1315;				//setting the new circlenumber + image										path2.updatePath();						}						if(path3.y == -257) {				//setting the new position (off-stage)								path3.y = 1315;				//setting the new circlenumber + image										path3.updatePath();						}						if(background1Loader.y == 800) {				//setting the new position (off-stage)								background1Loader.y = -800;							}						if(background2Loader.y == 800) {				//setting the new position (off-stage)								background2Loader.y = -800;							}						if(path3.y == -257) {				//setting the new position (off-stage)								path3.y = 1315;				//setting the new circlenumber + image										path3.updatePath();						}		}						public function rotateCircle(evt:KeyboardEvent) {			if(evt.keyCode == 37) {				this.activeCircle.rotation -= 1;				this.activePath.rotation -= 1;			}			if(evt.keyCode == 39) {				this.activeCircle.rotation += 1;				this.activePath.rotation += 1;			}		}				public function cursorPosition(evt:MouseEvent) {			cursor.x = mouseX;			cursor.y = mouseY;		}						public function glowCursor(e:Event) {			//we check if the mouse has moved since last frame			if (oldMouseX != mouseX || oldMouseY != mouseY) {				//if it does, we store the current position in oldMouseX and oldMouseY variables				oldMouseX = mouseX;				oldMouseY = mouseY;				//now we declare a new object. This object is from the library and has the class name "Glow"				glowElement = new Glow();								//set the position of the object to the cursor position				glowElement.x = mouseX;				glowElement.y = mouseY;				//set the lifeCoutner to 0, this will show how many frames our particles has lived.				glowElement.lifeCounter = 0;				//make the object a litle bigger than it is in the library				glowElement.width += 10;				glowElement.height += 10;				//add the item to the stage				stage.addChildAt(glowElement, 0);				//ads and event to the object that is executed every frame				glowElement.addEventListener(Event.ENTER_FRAME, fadeGlow);			}		}				public function fadeGlow(e:Event) {			//ads 1 to the life of the object (it lived one more frame			e.currentTarget.lifeCounter += 1;			//verify if the objects showl start to die			if (e.currentTarget.lifeCounter > life) {				//if it should die we start to fade it and also shrink it				e.currentTarget.alpha += -0.03;				e.currentTarget.width = e.currentTarget.height -= 0.3;			}			//once it has faded completly, we remove the event from the object and also remove the object from the stage			if (e.currentTarget.alpha <= 0) {				e.currentTarget.removeEventListener(Event.ENTER_FRAME, fadeGlow, false);				e.currentTarget.parent.removeChild(e.currentTarget);			}		}			}		}